(function(a){"use strict";function b(b){return a.extend({},e,b||{})}function c(a){return f[a]||new Promise(b=>{const c=new Image;c.onload=()=>b(!0),c.onerror=()=>b(!1),c.src=a})}function d(b){const d=a(b).data(),g=d?.[e.src],h=d?.[e.srcset];return c(g).then(c=>c?Promise.resolve():new Promise((c,d)=>{const i=new Image;i.onload=()=>{f[g]=g,a(b).is("img")?a(b).attr({src:g,srcset:h}):a(b.target).css("background-image","url('"+g+"')"),c()},i.onerror=()=>{e.onError(b),d()},i.src=g}))}const e={src:"data-src",srcset:"data-srcset",selector:".lazyload",root:null,rootMargin:"0px",threshold:0,cache:!0,cacheExpiry:null,onError:function(a){console.error("LazyLoad: Error loading image",a)}},f={};LazyLoad.prototype={constructor:LazyLoad,init:function(){const c=this.settings=b(this.options);if(this.images=a(c.selector),!window.IntersectionObserver)return void this.loadImages().then(()=>this.destroy());const e={root:c.root,rootMargin:c.rootMargin,threshold:[c.threshold]};this.observer=new IntersectionObserver(a=>{a.forEach(a=>{a.isIntersecting&&(this.observer.unobserve(a.target),d(a.target).catch(()=>{}))})},e),this.images.each((a,b)=>this.observer.observe(b))},loadImages:function(){const a=[];return this.images.each((b,c)=>{a.push(d(c))}),Promise.all(a)},destroy:function(){this.settings&&(this.observer.disconnect(),this.settings=null)},clearCache:function(){f={}}},a.fn.lazyload=function(a){return new LazyLoad(this,a||{}),this},window.lazyload=a.fn.lazyload})(jQuery);
